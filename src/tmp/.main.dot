digraph "CFG for 'main' function" {
	label="CFG for 'main' function";

	Node0x101c010 [shape=record,label="{entry:\l  %ma = alloca i32\l  %na = alloca i32\l  %mb = alloca i32\l  %nb = alloca i32\l  %i = alloca i32\l  %j = alloca i32\l  %k = alloca i32\l  %0 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x\l... i8]* @\"%d %d\", i32 0, i32 0), i32* %ma, i32* %na)\l  br label %for.init\l}"];
	Node0x101c010 -> Node0x101cf00;
	Node0x101cf00 [shape=record,label="{for.init:                                         \l  store i32 0, i32* %i\l  br label %for.cond\l}"];
	Node0x101cf00 -> Node0x101d0c0;
	Node0x101d0c0 [shape=record,label="{for.cond:                                         \l  %1 = load i32, i32* %ma\l  %2 = load i32, i32* %i\l  %3 = icmp slt i32 %2, %1\l  br i1 %3, label %for.loop, label %for.out\l|{<s0>T|<s1>F}}"];
	Node0x101d0c0:s0 -> Node0x101d2c0;
	Node0x101d0c0:s1 -> Node0x101d3a0;
	Node0x101d2c0 [shape=record,label="{for.loop:                                         \l  br label %for.init1\l}"];
	Node0x101d2c0 -> Node0x101d450;
	Node0x101d6d0 [shape=record,label="{for.end:                                          \l  %4 = load i32, i32* %i\l  %5 = add i32 %4, 1\l  store i32 %5, i32* %i\l  br label %for.cond\l}"];
	Node0x101d6d0 -> Node0x101d0c0;
	Node0x101d3a0 [shape=record,label="{for.out:                                          \l  %6 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([6 x i8], [6 x\l... i8]* @\"%d %d\", i32 0, i32 0), i32* %mb, i32* %nb)\l  br label %for.init6\l}"];
	Node0x101d3a0 -> Node0x101da40;
	Node0x101d450 [shape=record,label="{for.init1:                                        \l  store i32 0, i32* %j\l  br label %for.cond2\l}"];
	Node0x101d450 -> Node0x101db70;
	Node0x101db70 [shape=record,label="{for.cond2:                                        \l  %7 = load i32, i32* %na\l  %8 = load i32, i32* %j\l  %9 = icmp slt i32 %8, %7\l  br i1 %9, label %for.loop3, label %for.out5\l|{<s0>T|<s1>F}}"];
	Node0x101db70:s0 -> Node0x101d780;
	Node0x101db70:s1 -> Node0x101ddb0;
	Node0x101d780 [shape=record,label="{for.loop3:                                        \l  %10 = load i32, i32* %i\l  %11 = getelementptr [30 x [40 x i32]], [30 x [40 x i32]]* @a, i32 0, i32 %10\l  %12 = load i32, i32* %j\l  %13 = getelementptr [40 x i32], [40 x i32]* %11, i32 0, i32 %12\l  %14 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x\l... i8]* @\"%d\", i32 0, i32 0), i32* %13)\l  br label %for.end4\l}"];
	Node0x101d780 -> Node0x101e1a0;
	Node0x101e1a0 [shape=record,label="{for.end4:                                         \l  %15 = load i32, i32* %j\l  %16 = add i32 %15, 1\l  store i32 %16, i32* %j\l  br label %for.cond2\l}"];
	Node0x101e1a0 -> Node0x101db70;
	Node0x101ddb0 [shape=record,label="{for.out5:                                         \l  br label %for.end\l}"];
	Node0x101ddb0 -> Node0x101d6d0;
	Node0x101da40 [shape=record,label="{for.init6:                                        \l  store i32 0, i32* %i\l  br label %for.cond7\l}"];
	Node0x101da40 -> Node0x101e4b0;
	Node0x101e4b0 [shape=record,label="{for.cond7:                                        \l  %17 = load i32, i32* %mb\l  %18 = load i32, i32* %i\l  %19 = icmp slt i32 %18, %17\l  br i1 %19, label %for.loop8, label %for.out10\l|{<s0>T|<s1>F}}"];
	Node0x101e4b0:s0 -> Node0x101e660;
	Node0x101e4b0:s1 -> Node0x101e740;
	Node0x101e660 [shape=record,label="{for.loop8:                                        \l  br label %for.init11\l}"];
	Node0x101e660 -> Node0x101e820;
	Node0x101e900 [shape=record,label="{for.end9:                                         \l  %20 = load i32, i32* %i\l  %21 = add i32 %20, 1\l  store i32 %21, i32* %i\l  br label %for.cond7\l}"];
	Node0x101e900 -> Node0x101e4b0;
	Node0x101e740 [shape=record,label="{for.out10:                                        \l  br label %if.cond\l}"];
	Node0x101e740 -> Node0x101eb30;
	Node0x101e820 [shape=record,label="{for.init11:                                       \l  store i32 0, i32* %j\l  br label %for.cond12\l}"];
	Node0x101e820 -> Node0x101ef80;
	Node0x101ef80 [shape=record,label="{for.cond12:                                       \l  %22 = load i32, i32* %nb\l  %23 = load i32, i32* %j\l  %24 = icmp slt i32 %23, %22\l  br i1 %24, label %for.loop13, label %for.out15\l|{<s0>T|<s1>F}}"];
	Node0x101ef80:s0 -> Node0x101f130;
	Node0x101ef80:s1 -> Node0x101f210;
	Node0x101f130 [shape=record,label="{for.loop13:                                       \l  %25 = load i32, i32* %i\l  %26 = getelementptr [30 x [40 x i32]], [30 x [40 x i32]]* @b, i32 0, i32 %25\l  %27 = load i32, i32* %j\l  %28 = getelementptr [40 x i32], [40 x i32]* %26, i32 0, i32 %27\l  %29 = call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x\l... i8]* @\"%d\", i32 0, i32 0), i32* %28)\l  br label %for.end14\l}"];
	Node0x101f130 -> Node0x101f630;
	Node0x101f630 [shape=record,label="{for.end14:                                        \l  %30 = load i32, i32* %j\l  %31 = add i32 %30, 1\l  store i32 %31, i32* %j\l  br label %for.cond12\l}"];
	Node0x101f630 -> Node0x101ef80;
	Node0x101f210 [shape=record,label="{for.out15:                                        \l  br label %for.end9\l}"];
	Node0x101f210 -> Node0x101e900;
	Node0x101eb30 [shape=record,label="{if.cond:                                          \l  %32 = load i32, i32* %mb\l  %33 = load i32, i32* %na\l  %34 = icmp ne i32 %33, %32\l  br i1 %34, label %if.then, label %if.else\l|{<s0>T|<s1>F}}"];
	Node0x101eb30:s0 -> Node0x101fba0;
	Node0x101eb30:s1 -> Node0x101fc50;
	Node0x101fba0 [shape=record,label="{if.then:                                          \l  %35 = call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]*\l... @\"Incompatible Dimensions\", i32 0, i32 0))\l  br label %if.out\l}"];
	Node0x101fba0 -> Node0x101ff80;
	Node0x101fc50 [shape=record,label="{if.else:                                          \l  br label %for.init16\l}"];
	Node0x101fc50 -> Node0x1020030;
	Node0x101ff80 [shape=record,label="{if.out:                                           \l  br label %for.init26\l}"];
	Node0x101ff80 -> Node0x10200e0;
	Node0x1020030 [shape=record,label="{for.init16:                                       \l  store i32 0, i32* %i\l  br label %for.cond17\l}"];
	Node0x1020030 -> Node0x1020210;
	Node0x1020210 [shape=record,label="{for.cond17:                                       \l  %36 = load i32, i32* %ma\l  %37 = load i32, i32* %i\l  %38 = icmp slt i32 %37, %36\l  br i1 %38, label %for.loop18, label %for.out20\l|{<s0>T|<s1>F}}"];
	Node0x1020210:s0 -> Node0x10203c0;
	Node0x1020210:s1 -> Node0x10204a0;
	Node0x10203c0 [shape=record,label="{for.loop18:                                       \l  br label %for.init21\l}"];
	Node0x10203c0 -> Node0x1020e20;
	Node0x1020f00 [shape=record,label="{for.end19:                                        \l  %39 = load i32, i32* %i\l  %40 = add i32 %39, 1\l  store i32 %40, i32* %i\l  br label %for.cond17\l}"];
	Node0x1020f00 -> Node0x1020210;
	Node0x10204a0 [shape=record,label="{for.out20:                                        \l  br label %if.out\l}"];
	Node0x10204a0 -> Node0x101ff80;
	Node0x1020e20 [shape=record,label="{for.init21:                                       \l  store i32 0, i32* %j\l  br label %for.cond22\l}"];
	Node0x1020e20 -> Node0x10211b0;
	Node0x10211b0 [shape=record,label="{for.cond22:                                       \l  %41 = load i32, i32* %nb\l  %42 = load i32, i32* %j\l  %43 = icmp slt i32 %42, %41\l  br i1 %43, label %for.loop23, label %for.out25\l|{<s0>T|<s1>F}}"];
	Node0x10211b0:s0 -> Node0x1021360;
	Node0x10211b0:s1 -> Node0x1021440;
	Node0x1021360 [shape=record,label="{for.loop23:                                       \l  br label %for.end24\l}"];
	Node0x1021360 -> Node0x10215b0;
	Node0x10215b0 [shape=record,label="{for.end24:                                        \l  %44 = load i32, i32* %j\l  %45 = add i32 %44, 1\l  store i32 %45, i32* %j\l  br label %for.cond22\l}"];
	Node0x10215b0 -> Node0x10211b0;
	Node0x1021440 [shape=record,label="{for.out25:                                        \l  br label %for.end19\l}"];
	Node0x1021440 -> Node0x1020f00;
	Node0x10200e0 [shape=record,label="{for.init26:                                       \l  store i32 0, i32* %i\l  br label %for.cond27\l}"];
	Node0x10200e0 -> Node0x1021860;
	Node0x1021860 [shape=record,label="{for.cond27:                                       \l  %46 = load i32, i32* %ma\l  %47 = load i32, i32* %i\l  %48 = icmp slt i32 %47, %46\l  br i1 %48, label %for.loop28, label %for.out30\l|{<s0>T|<s1>F}}"];
	Node0x1021860:s0 -> Node0x1021a10;
	Node0x1021860:s1 -> Node0x1021af0;
	Node0x1021a10 [shape=record,label="{for.loop28:                                       \l  br label %for.init31\l}"];
	Node0x1021a10 -> Node0x1021c60;
	Node0x1021d40 [shape=record,label="{for.end29:                                        \l  %49 = load i32, i32* %i\l  %50 = add i32 %49, 1\l  store i32 %50, i32* %i\l  br label %for.cond27\l}"];
	Node0x1021d40 -> Node0x1021860;
	Node0x1021af0 [shape=record,label="{for.out30:                                        \l  ret i32 0\l}"];
	Node0x1021c60 [shape=record,label="{for.init31:                                       \l  store i32 0, i32* %j\l  br label %for.cond32\l}"];
	Node0x1021c60 -> Node0x1021ff0;
	Node0x1021ff0 [shape=record,label="{for.cond32:                                       \l  %51 = load i32, i32* %nb\l  %52 = load i32, i32* %j\l  %53 = icmp slt i32 %52, %51\l  br i1 %53, label %for.loop33, label %for.out35\l|{<s0>T|<s1>F}}"];
	Node0x1021ff0:s0 -> Node0x10227c0;
	Node0x1021ff0:s1 -> Node0x10228a0;
	Node0x10227c0 [shape=record,label="{for.loop33:                                       \l  %54 = load i32, i32* %i\l  %55 = getelementptr [30 x [40 x i32]], [30 x [40 x i32]]* @c, i32 0, i32 %54\l  %56 = load i32, i32* %j\l  %57 = getelementptr [40 x i32], [40 x i32]* %55, i32 0, i32 %56\l  %58 = load i32, i32* %57\l  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x\l... i8]* @\"%10d\", i32 0, i32 0), i32 %58)\l  br label %for.end34\l}"];
	Node0x10227c0 -> Node0x1022da0;
	Node0x1022da0 [shape=record,label="{for.end34:                                        \l  %60 = load i32, i32* %j\l  %61 = add i32 %60, 1\l  store i32 %61, i32* %j\l  br label %for.cond32\l}"];
	Node0x1022da0 -> Node0x1021ff0;
	Node0x10228a0 [shape=record,label="{for.out35:                                        \l  %62 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @0, i32\l... 0, i32 0))\l  br label %for.end29\l}"];
	Node0x10228a0 -> Node0x1021d40;
}
